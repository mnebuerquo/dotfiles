#!/bin/sh

function detectproxy() {
	# try curl with no proxy setting and see if we can get to google
	# if not, we need our proxy setting, else we don't
	# https://superuser.com/a/1311499/26022
	URL='www.google.com'

	curl --noproxy '*' -s -m 2 $URL > /dev/null

	if [ $? -eq 0 ]; then
		return 0
	else
		return 1
	fi
}

urlencodepipe() {
  local LANG=C; local c; while IFS= read -r c; do
    printf "$c" | xxd -ps -g 1 | awk '$0="%"$0' | tr -d '\n'
  done <<EOF
$(fold -w1)
EOF
  echo
}
urlencode() { printf "$*" | urlencodepipe ;}

function makeproxypass() {
	echo "Enter password:"
	read -s str
	touch ~/.proxy_pass
	chmod 600 ~/.proxy_pass
	echo $str | openssl base64 > ~/.proxy_pass
}

function setproxy() {
	PROXY_USER=$(whoami)
	PROXY_PASS=$(urlencode $(openssl base64 -d < ~/.proxy_pass))
	PROXY_HOST="cdcproxy.kroger.com:3128"
	export {http,https}_proxy="http://$PROXY_USER:$PROXY_PASS@$PROXY_HOST"
	export no_proxy="*.local, 169.254/16, localhost, 127.0.0.1, kroger.com"
	export VAGRANT_HTTP_PROXY="${http_proxy}"
	export VAGRANT_HTTPS_PROXY="${http_proxy}"
	export VAGRANT_FTP_PROXY="${http_proxy}"
	export VAGRANT_NO_PROXY="${no_proxy}"
	#npm config set proxy $(echo $http_proxy)
	#npm config set https-proxy $(echo $https_proxy)
}

function unsetproxy() {
	unset {http,https,no}_proxy
	unset VAGRANT_HTTP_PROXY
	unset VAGRANT_HTTPS_PROXY
	unset VAGRANT_FTP_PROXY
	unset VAGRANT_NO_PROXY
	#npm config rm proxy
	#npm config rm https-proxy
}

function detectsetproxy() {
	# see if we need to set proxy settings
	# TODO: how do I tell what network I'm on?
	detectproxy
	if [ $? -eq 0 ]; then
		unsetproxy
	else
		setproxy
	fi
}
